generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid()) @map("_id")
  name          String
  email         String         @unique
  password      String
  role          UserRole       @default(STUDENT)
  class         Class          @relation(fields: [classId], references: [id])
  classId       String
  notifications Notification[]
  assignments   Assignment[]
  votedPolls    VotedPoll[]
  createdPolls  Poll[]
  solutions     Solution[]
  chats         Chat[]         @relation(fields: [chatIds], references: [id])
  chatIds       String[]
  messages      Message[]
}

model Class {
  id            String         @id @default(cuid()) @map("_id")
  name          String         @unique
  classNumber   String         @unique
  students      User[]
  courses       Course[]
  announcements Announcement[]
}

model Course {
  id                      String         @id @default(cuid()) @map("_id")
  name                    String
  classId                 String
  class                   Class          @relation(fields: [classId], references: [id])
  assignments             Assignment[]
  notifications           Notification[]
  materials               Material[]
  googleClassroomId       String         @unique
  professorName           String?
  professorProfilePicture String?
}

model Assignment {
  id            String     @id @default(cuid()) @map("_id")
  googleId      String?    @unique
  title         String
  description   String?
  dueDate       DateTime?
  courseId      String
  course        Course     @relation(fields: [courseId], references: [id])
  solutions     Solution[]
  User          User?      @relation(fields: [userId], references: [id])
  userId        String?
  lastUpdated   DateTime   @default(now())
  materials     Json?
  alternateLink String?
  type          String?
  thumbnail     String?    @default("https://res.cloudinary.com/dkysrpdi6/image/upload/v1723574586/image_lpepb4.png")
}

model Solution {
  id           String     @id @default(cuid()) @map("_id")
  documentUrl  String
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  assignmentId String
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
}

model Announcement {
  id          String   @id @default(cuid()) @map("_id")
  title       String
  content     String
  classId     String
  class       Class    @relation(fields: [classId], references: [id])
  createdAt   DateTime @default(now())
  isImportant Boolean  @default(false)
}

model Notification {
  id        String   @id @default(cuid()) @map("_id")
  message   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Material {
  id       String @id @default(cuid()) @map("_id")
  name     String
  courseId String
  course   Course @relation(fields: [courseId], references: [id])
  document String
  category String
}

model Chat {
  id              String    @id @default(cuid()) @map("_id")
  name            String
  picture         String
  users           User[]    @relation(fields: [userIds], references: [id])
  userIds         String[]
  messages        Message[]
  latestMessage   Message?  @relation("LatestMessage", fields: [latestMessageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  latestMessageId String?   @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Message {
  id              String   @id @default(cuid()) @map("_id")
  content         String
  sender          User     @relation(fields: [senderId], references: [id])
  senderId        String
  chat            Chat     @relation(fields: [chatId], references: [id])
  chatId          String
  files           Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  isLatestMessage Chat?    @relation("LatestMessage")
  poll            Poll?
}

model Poll {
  id         String      @id @default(cuid()) @map("_id")
  question   String
  options    String[]
  votes      PollVote[]
  votedPolls VotedPoll[]
  createdBy  User        @relation(fields: [userId], references: [id])
  userId     String
  message    Message?    @relation(fields: [messageId], references: [id])
  messageId  String?     @unique
  createdAt  DateTime    @default(now())
}

model PollVote {
  id     String @id @default(cuid()) @map("_id")
  pollId String
  option String
  poll   Poll   @relation(fields: [pollId], references: [id])
}

model VotedPoll {
  id     String @id @default(cuid()) @map("_id")
  userId String
  pollId String
  user   User   @relation(fields: [userId], references: [id])
  poll   Poll   @relation(fields: [pollId], references: [id])
}

enum UserRole {
  STUDENT
  ADMIN
  TEACHER
}
